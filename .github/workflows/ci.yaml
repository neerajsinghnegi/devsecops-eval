name: CI â€” Security Gates

on:
  pull_request:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ github.repository }}/devsecops-eval

jobs:
  lint-and-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install deps
        run: |
          cd app
          npm ci
      - name: Run npm audit (fail on high/critical)
        run: |
          cd app
          npm audit --audit-level=high || (echo "npm audit found high/critical issues" && exit 1)
      - name: Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: './semgrep/.semgrep.yml'

  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: lint-and-sast
    environment: devsecops-eval
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build image
        run: |
          docker build -t ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.run_id }} -f app/Dockerfile .
      - name: Scan image with Trivy (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.run_id }}
          format: 'table'
          # exit-code: '1'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  iac-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          args: --out tfsec-results.sarif

  publish:
    needs: [build-and-scan-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: devsecops-eval
    steps:
      - uses: actions/checkout@v4
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Push image
        run: |
          docker push ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.run_id }}
